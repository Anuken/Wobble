apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "io.anuke.wobble.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

task copyDist(type: Copy) {
    into "/home/anuke/Documents/Packr/"
	from "build/libs/desktop-1.0.jar"
}

task copyLibs(type: Copy) {
    into "/home/anuke/Documents/Packr/classpath"
	from configurations.testRuntime
}

task clearLibs(type: Delete) {
    delete "/home/anuke/Documents/Packr/classpath"
}

task packr() {
	dependsOn 'dist'
	dependsOn 'copyDist'
	dependsOn 'clearLibs'
	dependsOn 'copyLibs'
}

task packrWin(dependsOn: packr, type: Exec) {
	
	commandLine "java", "-jar", "/home/anuke/Documents/Packr/packr.jar", "--resources", project.ext.assetsDir, "--platform", "windows32", "--executable", project.name, "--output", "packr-out/", "--mainclass", project.ext.mainClassName, "/home/anuke/Documents/Packr/config.json"
	
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
